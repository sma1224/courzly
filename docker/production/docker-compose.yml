version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: courzly-postgres
    environment:
      POSTGRES_DB: courzly
      POSTGRES_USER: courzly_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - courzly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U courzly_user -d courzly"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: courzly-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - courzly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  flowise:
    image: flowiseai/flowise:latest
    container_name: courzly-flowise
    environment:
      - DATABASE_PATH=/root/.flowise
      - APIKEY_PATH=/root/.flowise
      - SECRETKEY_PATH=/root/.flowise
      - LOG_LEVEL=info
      - LOG_PATH=/root/.flowise/logs
      - FLOWISE_USERNAME=${FLOWISE_USERNAME}
      - FLOWISE_PASSWORD=${FLOWISE_PASSWORD}
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=courzly_user
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_NAME=courzly_flowise
    ports:
      - "3000:3000"
    volumes:
      - flowise_data:/root/.flowise
      - ./flowise-config:/root/.flowise/config:ro
    networks:
      - courzly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  api:
    build:
      context: ../../backend/api
      dockerfile: Dockerfile.prod
    container_name: courzly-api
    environment:
      - DATABASE_URL=postgresql://courzly_user:${POSTGRES_PASSWORD}@postgres:5432/courzly
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - FLOWISE_URL=http://flowise:3000
      - SECRET_KEY=${API_SECRET_KEY}
      - GOOGLE_CREDENTIALS_PATH=/app/secrets/google-credentials.json
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    volumes:
      - ./secrets:/app/secrets:ro
      - api_logs:/app/logs
    networks:
      - courzly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      flowise:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.prod
    container_name: courzly-frontend
    environment:
      - REACT_APP_API_URL=https://${DOMAIN}/api
      - REACT_APP_FLOWISE_URL=https://${DOMAIN}/flowise
    networks:
      - courzly-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  nginx:
    image: nginx:alpine
    container_name: courzly-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - courzly-network
    depends_on:
      - api
      - frontend
      - flowise
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  prometheus:
    image: prom/prometheus:latest
    container_name: courzly-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - courzly-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  grafana:
    image: grafana/grafana:latest
    container_name: courzly-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - courzly-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  flowise_data:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  courzly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16